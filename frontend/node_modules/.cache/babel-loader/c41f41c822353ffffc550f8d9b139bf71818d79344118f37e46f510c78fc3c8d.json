{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ActionTypes } from './useListbox.types';\nimport areArraysEqual from '../utils/areArraysEqual';\n\n/**\n * Gets the current state. If the selectedValue is controlled,\n * the `value` prop is the source of truth instead of the internal state.\n */\nfunction getControlledState(internalState, props) {\n  if (props.value !== undefined) {\n    return _extends({}, internalState, {\n      selectedValue: props.value\n    });\n  }\n  return internalState;\n}\nfunction areOptionsEqual(option1, option2, optionComparer) {\n  if (option1 === option2) {\n    return true;\n  }\n  if (option1 === null || option2 === null) {\n    return false;\n  }\n  return optionComparer(option1, option2);\n}\n\n/**\n * Triggers change event handlers (onChange and onHighlightChange) when reducer returns changed state.\n *\n * @param nextState The next state returned by the reducer.\n * @param internalPreviousState The previous state. If the component is controlled, this is merged with the props to determine the final state.\n * @param propsRef The props with defaults applied.\n * @param lastActionRef The last action that was dispatched.\n */\nfunction useStateChangeDetection(nextState, internalPreviousState, propsRef, lastActionRef) {\n  React.useEffect(() => {\n    var _previousState$select;\n    if (!propsRef.current || lastActionRef.current === null) {\n      // Detect changes only if an action has been dispatched.\n      return;\n    }\n    if (lastActionRef.current.type === ActionTypes.setValue || lastActionRef.current.type === ActionTypes.setHighlight) {\n      // Don't fire change events when the value has been changed externally (e.g. by changing the controlled prop).\n      return;\n    }\n    const previousState = getControlledState(internalPreviousState, propsRef.current);\n    const {\n      optionComparer,\n      onChange\n    } = propsRef.current;\n    const previousSelectedValues = (_previousState$select = previousState == null ? void 0 : previousState.selectedValues) != null ? _previousState$select : [];\n    const nextSelectedValues = nextState.selectedValues;\n    if (!areArraysEqual(nextSelectedValues, previousSelectedValues, optionComparer)) {\n      onChange == null ? void 0 : onChange(lastActionRef.current.event, nextSelectedValues);\n    }\n\n    // Fires the highlightChange event when reducer returns changed `highlightedValue`.\n    if (!areOptionsEqual(internalPreviousState.highlightedValue, nextState.highlightedValue, propsRef.current.optionComparer)) {\n      var _propsRef$current, _propsRef$current$onH;\n      (_propsRef$current = propsRef.current) == null ? void 0 : (_propsRef$current$onH = _propsRef$current.onHighlightChange) == null ? void 0 : _propsRef$current$onH.call(_propsRef$current, lastActionRef.current.event, nextState.highlightedValue);\n    }\n    lastActionRef.current = null;\n  }, [nextState.selectedValues, nextState.highlightedValue, internalPreviousState, propsRef, lastActionRef]);\n}\n\n/**\n * @ignore - do not document.\n */\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  var _ref;\n  const {\n    value,\n    defaultValue\n  } = props.current;\n  const actionRef = React.useRef(null);\n  const initialSelectedValues = (_ref = value === undefined ? defaultValue : value) != null ? _ref : [];\n  const initialState = {\n    highlightedValue: null,\n    selectedValues: initialSelectedValues\n  };\n  const combinedReducer = React.useCallback((state, action) => {\n    actionRef.current = action;\n    if (externalReducer) {\n      return externalReducer(getControlledState(state, action.props), action);\n    }\n    return internalReducer(getControlledState(state, action.props), action);\n  }, [externalReducer, internalReducer]);\n  const [nextState, dispatch] = React.useReducer(combinedReducer, initialState);\n  const dispatchWithProps = React.useCallback(action => {\n    dispatch(_extends({\n      props: props.current\n    }, action));\n  }, [dispatch, props]);\n  const previousState = React.useRef(initialState);\n  React.useEffect(() => {\n    previousState.current = nextState;\n  }, [previousState, nextState]);\n  useStateChangeDetection(nextState, previousState.current, props, actionRef);\n  return [getControlledState(nextState, props.current), dispatchWithProps];\n}","map":{"version":3,"names":["_extends","React","ActionTypes","areArraysEqual","getControlledState","internalState","props","value","undefined","selectedValue","areOptionsEqual","option1","option2","optionComparer","useStateChangeDetection","nextState","internalPreviousState","propsRef","lastActionRef","useEffect","_previousState$select","current","type","setValue","setHighlight","previousState","onChange","previousSelectedValues","selectedValues","nextSelectedValues","event","highlightedValue","_propsRef$current","_propsRef$current$onH","onHighlightChange","call","useControllableReducer","internalReducer","externalReducer","_ref","defaultValue","actionRef","useRef","initialSelectedValues","initialState","combinedReducer","useCallback","state","action","dispatch","useReducer","dispatchWithProps"],"sources":["/Users/ash/Desktop/AshProjects/whisperPPT/frontend/node_modules/@mui/base/useListbox/useControllableReducer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ActionTypes } from './useListbox.types';\nimport areArraysEqual from '../utils/areArraysEqual';\n\n/**\n * Gets the current state. If the selectedValue is controlled,\n * the `value` prop is the source of truth instead of the internal state.\n */\nfunction getControlledState(internalState, props) {\n  if (props.value !== undefined) {\n    return _extends({}, internalState, {\n      selectedValue: props.value\n    });\n  }\n  return internalState;\n}\nfunction areOptionsEqual(option1, option2, optionComparer) {\n  if (option1 === option2) {\n    return true;\n  }\n  if (option1 === null || option2 === null) {\n    return false;\n  }\n  return optionComparer(option1, option2);\n}\n\n/**\n * Triggers change event handlers (onChange and onHighlightChange) when reducer returns changed state.\n *\n * @param nextState The next state returned by the reducer.\n * @param internalPreviousState The previous state. If the component is controlled, this is merged with the props to determine the final state.\n * @param propsRef The props with defaults applied.\n * @param lastActionRef The last action that was dispatched.\n */\nfunction useStateChangeDetection(nextState, internalPreviousState, propsRef, lastActionRef) {\n  React.useEffect(() => {\n    var _previousState$select;\n    if (!propsRef.current || lastActionRef.current === null) {\n      // Detect changes only if an action has been dispatched.\n      return;\n    }\n    if (lastActionRef.current.type === ActionTypes.setValue || lastActionRef.current.type === ActionTypes.setHighlight) {\n      // Don't fire change events when the value has been changed externally (e.g. by changing the controlled prop).\n      return;\n    }\n    const previousState = getControlledState(internalPreviousState, propsRef.current);\n    const {\n      optionComparer,\n      onChange\n    } = propsRef.current;\n    const previousSelectedValues = (_previousState$select = previousState == null ? void 0 : previousState.selectedValues) != null ? _previousState$select : [];\n    const nextSelectedValues = nextState.selectedValues;\n    if (!areArraysEqual(nextSelectedValues, previousSelectedValues, optionComparer)) {\n      onChange == null ? void 0 : onChange(lastActionRef.current.event, nextSelectedValues);\n    }\n\n    // Fires the highlightChange event when reducer returns changed `highlightedValue`.\n    if (!areOptionsEqual(internalPreviousState.highlightedValue, nextState.highlightedValue, propsRef.current.optionComparer)) {\n      var _propsRef$current, _propsRef$current$onH;\n      (_propsRef$current = propsRef.current) == null ? void 0 : (_propsRef$current$onH = _propsRef$current.onHighlightChange) == null ? void 0 : _propsRef$current$onH.call(_propsRef$current, lastActionRef.current.event, nextState.highlightedValue);\n    }\n    lastActionRef.current = null;\n  }, [nextState.selectedValues, nextState.highlightedValue, internalPreviousState, propsRef, lastActionRef]);\n}\n\n/**\n * @ignore - do not document.\n */\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  var _ref;\n  const {\n    value,\n    defaultValue\n  } = props.current;\n  const actionRef = React.useRef(null);\n  const initialSelectedValues = (_ref = value === undefined ? defaultValue : value) != null ? _ref : [];\n  const initialState = {\n    highlightedValue: null,\n    selectedValues: initialSelectedValues\n  };\n  const combinedReducer = React.useCallback((state, action) => {\n    actionRef.current = action;\n    if (externalReducer) {\n      return externalReducer(getControlledState(state, action.props), action);\n    }\n    return internalReducer(getControlledState(state, action.props), action);\n  }, [externalReducer, internalReducer]);\n  const [nextState, dispatch] = React.useReducer(combinedReducer, initialState);\n  const dispatchWithProps = React.useCallback(action => {\n    dispatch(_extends({\n      props: props.current\n    }, action));\n  }, [dispatch, props]);\n  const previousState = React.useRef(initialState);\n  React.useEffect(() => {\n    previousState.current = nextState;\n  }, [previousState, nextState]);\n  useStateChangeDetection(nextState, previousState.current, props, actionRef);\n  return [getControlledState(nextState, props.current), dispatchWithProps];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
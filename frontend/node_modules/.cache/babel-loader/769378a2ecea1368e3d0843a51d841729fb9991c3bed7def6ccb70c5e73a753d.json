{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = _ref;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const {\n        colorSchemes = {},\n        components = {},\n        generateCssVars = () => ({\n          vars: {},\n          css: {}\n        }),\n        cssVarPrefix\n      } = themeProp,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      }\n      // This scope occurs on the server\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n      return defaultMode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = generateCssVars();\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars\n      } = generateCssVars(key);\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","_ref","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","components","generateCssVars","vars","css","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","stateMode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","stateColorScheme","setColorScheme","supportedColorSchemes","calculatedMode","calculatedColorScheme","rootCss","rootVars","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","_ref2","key","scheme","schemeKey","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","shouldGenerateStyleSheet","element","Fragment","styles","Provider","propTypes","string","node","any","oneOfType","object","bool","getInitColorSchemeScript","params"],"sources":["/Users/ash/Desktop/AshProjects/whisperPPT/frontend/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = designSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    disableNestedContext = false,\n    disableStyleSheetGeneration = false\n  }) {\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const {\n        colorSchemes = {},\n        components = {},\n        generateCssVars = () => ({\n          vars: {},\n          css: {}\n        }),\n        cssVarPrefix\n      } = themeProp,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      }\n      // This scope occurs on the server\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n      return defaultMode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = generateCssVars();\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = generateCssVars(key);\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
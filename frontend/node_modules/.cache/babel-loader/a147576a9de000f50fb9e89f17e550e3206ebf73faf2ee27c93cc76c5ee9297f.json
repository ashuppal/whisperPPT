{"ast":null,"code":"var _jsxFileName = \"/Users/ash/Desktop/AshProjects/whisperPPT/frontend/src/Components/Transcription.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transcription = _ref => {\n  _s();\n  let {\n    audioFile\n  } = _ref;\n  const [transcription, setTranscription] = useState(null);\n  const [slides, setSlides] = useState(null);\n  useEffect(() => {\n    const getTranscription = async () => {\n      try {\n        const formData = new FormData();\n        formData.append('audio', audioFile);\n        const response = await axios.post('http://localhost:3001/whisper', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        setTranscription(response.data.transcription);\n        generatePPT(response.data.slides); // Generate PowerPoint presentation from the slides\n      } catch (error) {\n        console.error('Error getting transcription:', error);\n      }\n    };\n    if (audioFile) {\n      getTranscription();\n    }\n  }, [audioFile]);\n  const savePPT = pptBlob => {\n    const blob = new Blob([pptBlob], {\n      type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n    });\n    saveAs(blob, 'generated_presentation.pptx');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: transcription ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transcription:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing your audio file...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Transcription, \"UEHWRCIKFcNh5DJuqh4hcRXbU/o=\");\n_c = Transcription;\nexport default Transcription;\nvar _c;\n$RefreshReg$(_c, \"Transcription\");","map":{"version":3,"names":["React","useState","useEffect","axios","saveAs","jsxDEV","_jsxDEV","Transcription","_ref","_s","audioFile","transcription","setTranscription","slides","setSlides","getTranscription","formData","FormData","append","response","post","headers","data","generatePPT","error","console","savePPT","pptBlob","blob","Blob","type","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ash/Desktop/AshProjects/whisperPPT/frontend/src/Components/Transcription.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { saveAs } from 'file-saver';\n\nconst Transcription = ({ audioFile }) => {\n  const [transcription, setTranscription] = useState(null);\n  const [slides, setSlides] = useState(null);\n\n  \n  useEffect(() => {\n    const getTranscription = async () => {\n      try {\n        const formData = new FormData();\n        formData.append('audio', audioFile);\n  \n        const response = await axios.post('http://localhost:3001/whisper', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          }\n        });\n  \n        setTranscription(response.data.transcription);\n        generatePPT(response.data.slides); // Generate PowerPoint presentation from the slides\n      } catch (error) {\n        console.error('Error getting transcription:', error);\n      }\n    };\n  \n    if (audioFile) {\n      getTranscription();\n    }\n  }, [audioFile]);\n  \n  const savePPT = (pptBlob) => {\n    const blob = new Blob([pptBlob], { type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation' });\n    saveAs(blob, 'generated_presentation.pptx');\n  };\n\n  return (\n    <div>\n      {transcription ? (\n        <div>\n          <h2>Transcription:</h2>\n          <p>{transcription}</p>\n        </div>\n      ) : (\n        <p>Processing your audio file...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Transcription;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,aAAa,GAAGC,IAAA,IAAmB;EAAAC,EAAA;EAAA,IAAlB;IAAEC;EAAU,CAAC,GAAAF,IAAA;EAClC,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAG1CC,SAAS,CAAC,MAAM;IACd,MAAMa,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;QAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAER,SAAS,CAAC;QAEnC,MAAMS,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,+BAA+B,EAAEJ,QAAQ,EAAE;UAC3EK,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QAEFT,gBAAgB,CAACO,QAAQ,CAACG,IAAI,CAACX,aAAa,CAAC;QAC7CY,WAAW,CAACJ,QAAQ,CAACG,IAAI,CAACT,MAAM,CAAC,CAAC,CAAC;MACrC,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAED,IAAId,SAAS,EAAE;MACbK,gBAAgB,EAAE;IACpB;EACF,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;EAEf,MAAMgB,OAAO,GAAIC,OAAO,IAAK;IAC3B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,OAAO,CAAC,EAAE;MAAEG,IAAI,EAAE;IAA4E,CAAC,CAAC;IACvH1B,MAAM,CAACwB,IAAI,EAAE,6BAA6B,CAAC;EAC7C,CAAC;EAED,oBACEtB,OAAA;IAAAyB,QAAA,EACGpB,aAAa,gBACZL,OAAA;MAAAyB,QAAA,gBACEzB,OAAA;QAAAyB,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACvB7B,OAAA;QAAAyB,QAAA,EAAIpB;MAAa;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAClB,gBAEN7B,OAAA;MAAAyB,QAAA,EAAG;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACjC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV,CAAC;AAAC1B,EAAA,CA9CIF,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AAgDnB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
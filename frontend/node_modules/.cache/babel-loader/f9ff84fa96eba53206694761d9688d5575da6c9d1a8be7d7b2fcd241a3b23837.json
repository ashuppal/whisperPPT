{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport useButton from '../useButton';\nimport useListbox, { defaultListboxReducer, ActionTypes } from '../useListbox';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport useSelectChangeNotifiers from './useSelectChangeNotifiers';\n\n/**\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open = false,\n    options,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    defaultValue = multiple ? defaultValueProp : [defaultValueProp];\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      return multiple ? valueProp : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const optionsMap = React.useMemo(() => {\n    const map = new Map();\n    options.forEach(option => {\n      map.set(option.value, option);\n    });\n    return map;\n  }, [options]);\n\n  // prevents closing the listbox on keyUp right after opening it\n  const ignoreEnterKeyUp = React.useRef(false);\n\n  // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n  const ignoreClick = React.useRef(false);\n\n  // Ensure the listbox is focused after opening\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useSelectChangeNotifiers();\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      onOpenChange == null ? void 0 : onOpenChange(!open);\n    }\n    ignoreClick.current = false;\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      onOpenChange == null ? void 0 : onOpenChange(true);\n    }\n  };\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current;\n      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n    }\n    ignoreEnterKeyUp.current = false;\n  };\n  const createHandleListboxItemClick = React.useCallback(otherHandlers => event => {\n    var _otherHandlers$onClic2;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (!multiple) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  }, [multiple, onOpenChange]);\n  const createHandleListboxBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur;\n    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);\n    if (!event.defaultPrevented) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  };\n  const listboxReducer = React.useCallback((state, action) => {\n    const newState = defaultListboxReducer(state, action);\n    switch (action.type) {\n      case ActionTypes.keyDown:\n        // change selection when listbox is closed\n        if ((action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown') && !open && !multiple) {\n          return _extends({}, newState, {\n            selectedValues: newState.highlightedValue != null ? [newState.highlightedValue] : []\n          });\n        }\n        break;\n      case ActionTypes.blur:\n      case ActionTypes.setValue:\n      case ActionTypes.optionsChange:\n        return _extends({}, newState, {\n          highlightedValue: newState.selectedValues.length > 0 ? newState.selectedValues[0] : null\n        });\n      default:\n        return newState;\n    }\n    return newState;\n  }, [open, multiple]);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible\n  } = useButton({\n    disabled,\n    ref: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => options.map(o => o.value), [options]);\n  const isOptionDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = optionsMap.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [optionsMap]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = optionsMap.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return optionStringifier(option);\n  }, [optionsMap, optionStringifier]);\n  const useListboxParameters = {\n    defaultValue,\n    id: listboxId,\n    isOptionDisabled,\n    listboxRef: handleListboxRef,\n    onChange: (e, newValues) => {\n      if (multiple) {\n        onChange == null ? void 0 : onChange(e, newValues);\n      } else {\n        var _newValues$;\n        onChange == null ? void 0 : onChange(e, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n      }\n    },\n    onHighlightChange: (e, newValue) => {\n      onHighlightChange == null ? void 0 : onHighlightChange(e, newValue != null ? newValue : null);\n    },\n    options: optionValues,\n    optionStringifier: stringifyOption,\n    selectionLimit: multiple ? null : 1,\n    stateReducer: listboxReducer,\n    value\n  };\n  const {\n    getRootProps: getListboxRootProps,\n    getOptionProps: getListboxOptionProps,\n    getOptionState,\n    highlightedOption,\n    selectedOption\n  } = useListbox(useListboxParameters);\n  React.useEffect(() => {\n    notifySelectionChanged(selectedOption);\n  }, [selectedOption, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedOption);\n  }, [highlightedOption, notifyHighlightChanged]);\n  const getButtonProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n  const getListboxProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return getListboxRootProps(_extends({}, otherHandlers, {\n      onBlur: createHandleListboxBlur(otherHandlers),\n      onKeyUp: createHandleListboxKeyUp(otherHandlers)\n    }));\n  };\n  const getOptionProps = React.useCallback(function (optionValue) {\n    let otherHandlers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return getListboxOptionProps(optionValue, _extends({}, otherHandlers, {\n      onClick: createHandleListboxItemClick(otherHandlers)\n    }));\n  }, [getListboxOptionProps, createHandleListboxItemClick]);\n  React.useDebugValue({\n    selectedOption,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => ({\n    listboxRef,\n    getOptionProps,\n    getOptionState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [getOptionProps, getOptionState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  if (props.multiple) {\n    return {\n      buttonActive,\n      buttonFocusVisible,\n      disabled,\n      getButtonProps,\n      getListboxProps,\n      contextValue,\n      open,\n      value: selectedOption,\n      highlightedOption\n    };\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    contextValue,\n    open,\n    value: selectedOption.length > 0 ? selectedOption[0] : null,\n    highlightedOption\n  };\n}\nexport default useSelect;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","useButton","useListbox","defaultListboxReducer","ActionTypes","defaultOptionStringifier","useSelectChangeNotifiers","useSelect","props","buttonRef","buttonRefProp","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","onChange","onHighlightChange","onOpenChange","open","options","optionStringifier","value","valueProp","useRef","handleButtonRef","undefined","useMemo","optionsMap","map","Map","forEach","option","set","ignoreEnterKeyUp","ignoreClick","listboxFocusRequested","requestListboxFocus","useState","focusListboxIfRequested","useCallback","current","focus","handleListboxRef","notifySelectionChanged","notifyHighlightChanged","registerHighlightChangeHandler","registerSelectionChangeHandler","useEffect","createHandleMouseDown","otherHandlers","event","_otherHandlers$onMous","onMouseDown","call","defaultPrevented","createHandleButtonClick","_otherHandlers$onClic","onClick","createHandleButtonKeyDown","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","createHandleListboxKeyUp","_otherHandlers$onKeyU","onKeyUp","closingKeys","includes","_buttonRef$current","createHandleListboxItemClick","_otherHandlers$onClic2","createHandleListboxBlur","_otherHandlers$onBlur","onBlur","listboxReducer","state","action","newState","type","keyDown","selectedValues","highlightedValue","blur","setValue","optionsChange","length","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","ref","optionValues","o","isOptionDisabled","valueToCheck","_option$disabled","get","stringifyOption","useListboxParameters","id","e","newValues","_newValues$","newValue","selectionLimit","stateReducer","getListboxRootProps","getOptionProps","getListboxOptionProps","getOptionState","highlightedOption","selectedOption","getButtonProps","arguments","role","getListboxProps","optionValue","useDebugValue","contextValue"],"sources":["/Users/ash/Desktop/AshProjects/whisperPPT/frontend/node_modules/@mui/base/useSelect/useSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport useButton from '../useButton';\nimport useListbox, { defaultListboxReducer, ActionTypes } from '../useListbox';\nimport defaultOptionStringifier from '../SelectUnstyled/defaultOptionStringifier';\nimport useSelectChangeNotifiers from './useSelectChangeNotifiers';\n\n/**\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open = false,\n    options,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    defaultValue = multiple ? defaultValueProp : [defaultValueProp];\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      return multiple ? valueProp : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const optionsMap = React.useMemo(() => {\n    const map = new Map();\n    options.forEach(option => {\n      map.set(option.value, option);\n    });\n    return map;\n  }, [options]);\n\n  // prevents closing the listbox on keyUp right after opening it\n  const ignoreEnterKeyUp = React.useRef(false);\n\n  // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n  const ignoreClick = React.useRef(false);\n\n  // Ensure the listbox is focused after opening\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useSelectChangeNotifiers();\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      onOpenChange == null ? void 0 : onOpenChange(!open);\n    }\n    ignoreClick.current = false;\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      onOpenChange == null ? void 0 : onOpenChange(true);\n    }\n  };\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current;\n      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n    }\n    ignoreEnterKeyUp.current = false;\n  };\n  const createHandleListboxItemClick = React.useCallback(otherHandlers => event => {\n    var _otherHandlers$onClic2;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (!multiple) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  }, [multiple, onOpenChange]);\n  const createHandleListboxBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur;\n    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);\n    if (!event.defaultPrevented) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  };\n  const listboxReducer = React.useCallback((state, action) => {\n    const newState = defaultListboxReducer(state, action);\n    switch (action.type) {\n      case ActionTypes.keyDown:\n        // change selection when listbox is closed\n        if ((action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown') && !open && !multiple) {\n          return _extends({}, newState, {\n            selectedValues: newState.highlightedValue != null ? [newState.highlightedValue] : []\n          });\n        }\n        break;\n      case ActionTypes.blur:\n      case ActionTypes.setValue:\n      case ActionTypes.optionsChange:\n        return _extends({}, newState, {\n          highlightedValue: newState.selectedValues.length > 0 ? newState.selectedValues[0] : null\n        });\n      default:\n        return newState;\n    }\n    return newState;\n  }, [open, multiple]);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible\n  } = useButton({\n    disabled,\n    ref: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => options.map(o => o.value), [options]);\n  const isOptionDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = optionsMap.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [optionsMap]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = optionsMap.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return optionStringifier(option);\n  }, [optionsMap, optionStringifier]);\n  const useListboxParameters = {\n    defaultValue,\n    id: listboxId,\n    isOptionDisabled,\n    listboxRef: handleListboxRef,\n    onChange: (e, newValues) => {\n      if (multiple) {\n        onChange == null ? void 0 : onChange(e, newValues);\n      } else {\n        var _newValues$;\n        onChange == null ? void 0 : onChange(e, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n      }\n    },\n    onHighlightChange: (e, newValue) => {\n      onHighlightChange == null ? void 0 : onHighlightChange(e, newValue != null ? newValue : null);\n    },\n    options: optionValues,\n    optionStringifier: stringifyOption,\n    selectionLimit: multiple ? null : 1,\n    stateReducer: listboxReducer,\n    value\n  };\n  const {\n    getRootProps: getListboxRootProps,\n    getOptionProps: getListboxOptionProps,\n    getOptionState,\n    highlightedOption,\n    selectedOption\n  } = useListbox(useListboxParameters);\n  React.useEffect(() => {\n    notifySelectionChanged(selectedOption);\n  }, [selectedOption, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedOption);\n  }, [highlightedOption, notifyHighlightChanged]);\n  const getButtonProps = (otherHandlers = {}) => {\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n  const getListboxProps = (otherHandlers = {}) => getListboxRootProps(_extends({}, otherHandlers, {\n    onBlur: createHandleListboxBlur(otherHandlers),\n    onKeyUp: createHandleListboxKeyUp(otherHandlers)\n  }));\n  const getOptionProps = React.useCallback((optionValue, otherHandlers = {}) => {\n    return getListboxOptionProps(optionValue, _extends({}, otherHandlers, {\n      onClick: createHandleListboxItemClick(otherHandlers)\n    }));\n  }, [getListboxOptionProps, createHandleListboxItemClick]);\n  React.useDebugValue({\n    selectedOption,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => ({\n    listboxRef,\n    getOptionProps,\n    getOptionState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [getOptionProps, getOptionState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  if (props.multiple) {\n    return {\n      buttonActive,\n      buttonFocusVisible,\n      disabled,\n      getButtonProps,\n      getListboxProps,\n      contextValue,\n      open,\n      value: selectedOption,\n      highlightedOption\n    };\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    contextValue,\n    open,\n    value: selectedOption.length > 0 ? selectedOption[0] : null,\n    highlightedOption\n  };\n}\nexport default useSelect;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}